import type { ComAtprotoServerCreateAppPassword } from "@atproto/api";
import { useMutation } from "@tanstack/react-query";
import { useEffect, useMemo, useState } from "react";
import { View, useWindowDimensions } from "react-native";
import Animated, { FadeIn, FadeOut, LayoutAnimationConfig } from "react-native-reanimated";

import { atoms as a, useTheme } from "#/alf";
import { Admonition } from "#/components/Admonition";
import { Button, ButtonIcon, ButtonText } from "#/components/Button";
import * as Dialog from "#/components/Dialog";
import { Text } from "#/components/Typography";
import * as TextInput from "#/components/forms/TextField";
import * as Toggle from "#/components/forms/Toggle";
import { ChevronRight_Stroke2_Corner0_Rounded as ChevronRight } from "#/components/icons/Chevron";
import { SquareBehindSquare4_Stroke2_Corner0_Rounded as CopyIcon } from "#/components/icons/SquareBehindSquare4";
import { useAppPasswordCreateMutation } from "#/state/queries/app-passwords";
import { CopyButton } from "./CopyButton";

export function AddAppPasswordDialog({
	control,
	passwords,
}: {
	control: Dialog.DialogControlProps;
	passwords: string[];
}) {
	const { height } = useWindowDimensions();
	return (
		<Dialog.Outer control={control} nativeOptions={{ minHeight: height }}>
			<Dialog.Handle />
			<CreateDialogInner passwords={passwords} />
		</Dialog.Outer>
	);
}

function CreateDialogInner({ passwords }: { passwords: string[] }) {
	const control = Dialog.useDialogContext();
	const t = useTheme();
	const autogeneratedName = useRandomName();
	const [name, setName] = useState("");
	const [privileged, setPrivileged] = useState(false);
	const { mutateAsync: actuallyCreateAppPassword, error: apiError, data } = useAppPasswordCreateMutation();

	const regexFailError = useMemo(
		() =>
			new DisplayableError(
				"App password names can only contain letters, numbers, spaces, dashes, and underscores",
			),
		[],
	);

	const {
		mutate: createAppPassword,
		error: validationError,
		isPending,
	} = useMutation<ComAtprotoServerCreateAppPassword.AppPassword, Error | DisplayableError>({
		mutationFn: async () => {
			const chosenName = name.trim() || autogeneratedName;
			if (chosenName.length < 4) {
				throw new DisplayableError("App password names must be at least 4 characters long");
			}
			if (passwords.find((p) => p === chosenName)) {
				throw new DisplayableError("App password name must be unique");
			}
			return await actuallyCreateAppPassword({ name: chosenName, privileged });
		},
	});

	const [hasBeenCopied, setHasBeenCopied] = useState(false);
	useEffect(() => {
		if (hasBeenCopied) {
			const timeout = setTimeout(() => setHasBeenCopied(false), 100);
			return () => clearTimeout(timeout);
		}
	}, [hasBeenCopied]);

	const error = validationError || (!name.match(/^[a-zA-Z0-9-_ ]*$/) && regexFailError);

	return (
		<Dialog.ScrollableInner label={"Add app password"}>
			<View>
				<LayoutAnimationConfig skipEntering skipExiting>
					{!data ? (
						<Animated.View style={a.gap_lg} key={0}>
							<Text
								style={{
									...a.text_2xl,
									...a.font_bold,
								}}
							>
								Add App Password
							</Text>
							<Text
								style={{
									...a.text_md,
									...a.leading_snug,
								}}
							>
								Please enter a unique name for this app password or use our randomly generated one.
							</Text>
							<View>
								<TextInput.Root isInvalid={!!error}>
									<Dialog.Input
										label={"App Password"}
										placeholder={autogeneratedName}
										onChangeText={setName}
										returnKeyType="done"
										onSubmitEditing={() => createAppPassword()}
										blurOnSubmit
										autoCorrect={"off"}
										autoComplete="off"
										autoCapitalize="none"
										autoFocus
									/>
								</TextInput.Root>
							</View>
							{error instanceof DisplayableError && (
								<Animated.View entering={FadeIn} exiting={FadeOut}>
									<Admonition type="error">{error.message}</Admonition>
								</Animated.View>
							)}
							<Animated.View style={a.gap_lg}>
								<Toggle.Item
									name="privileged"
									type="checkbox"
									label={"Allow access to your direct messages"}
									value={privileged}
									onChange={setPrivileged}
									style={a.flex_1}
								>
									<Toggle.Checkbox />
									<Toggle.LabelText
										style={{
											...a.font_normal,
											...a.text_md,
											...a.leading_snug,
										}}
									>
										Allow access to your direct messages
									</Toggle.LabelText>
								</Toggle.Item>
								<Button
									label={"Next"}
									size="large"
									variant="solid"
									color="primary"
									style={a.flex_1}
									onPress={() => createAppPassword()}
									disabled={isPending}
								>
									<ButtonText>Next</ButtonText>
									<ButtonIcon icon={ChevronRight} />
								</Button>
								{!!apiError ||
									(error && !(error instanceof DisplayableError) && (
										<Animated.View entering={FadeIn} exiting={FadeOut}>
											<Admonition type="error">
												Failed to create app password. Please try again.
											</Admonition>
										</Animated.View>
									))}
							</Animated.View>
						</Animated.View>
					) : (
						<Animated.View style={a.gap_lg} entering={FadeIn.delay(200)} key={1}>
							<Text
								style={{
									...a.text_2xl,
									...a.font_bold,
								}}
							>
								Here is your app password!
							</Text>
							<Text
								style={{
									...a.text_md,
									...a.leading_snug,
								}}
							>
								Use this to sign in to the other app along with your handle.
							</Text>
							<CopyButton
								value={data.password}
								label={"Copy App Password"}
								size="large"
								variant="solid"
								color="secondary"
							>
								<ButtonText>{data.password}</ButtonText>
								<ButtonIcon icon={CopyIcon} />
							</CopyButton>
							<Text
								style={{
									...a.text_md,
									...a.leading_snug,
									...t.atoms.text_contrast_medium,
								}}
							>
								For security reasons, you won't be able to view this again. If you lose this app
								password, you'll need to generate a new one.
							</Text>
							<Button
								label={"Done"}
								size="large"
								variant="outline"
								color="primary"
								style={a.flex_1}
								onPress={() => control.close()}
							>
								<ButtonText>Done</ButtonText>
							</Button>
						</Animated.View>
					)}
				</LayoutAnimationConfig>
			</View>
			<Dialog.Close />
		</Dialog.ScrollableInner>
	);
}

class DisplayableError extends Error {
	constructor(message: string) {
		super(message);
		this.name = "DisplayableError";
	}
}

function useRandomName() {
	return useState(() => shadesOfBlue[Math.floor(Math.random() * shadesOfBlue.length)])[0];
}

const shadesOfBlue: string[] = [
	"AliceBlue",
	"Aqua",
	"Aquamarine",
	"Azure",
	"BabyBlue",
	"Blue",
	"BlueViolet",
	"CadetBlue",
	"CornflowerBlue",
	"Cyan",
	"DarkBlue",
	"DarkCyan",
	"DarkSlateBlue",
	"DeepSkyBlue",
	"DodgerBlue",
	"ElectricBlue",
	"LightBlue",
	"LightCyan",
	"LightSkyBlue",
	"LightSteelBlue",
	"MediumAquaMarine",
	"MediumBlue",
	"MediumSlateBlue",
	"MidnightBlue",
	"Navy",
	"PowderBlue",
	"RoyalBlue",
	"SkyBlue",
	"SlateBlue",
	"SteelBlue",
	"Teal",
	"Turquoise",
];
